plugins {
  id 'org.owasp.dependencycheck' version '6.0.3'
}

allprojects {
  group 'app.quickcase.logging'
  version '6.0.0-rc1'

  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply plugin: 'pmd'

  checkstyle {
    toolVersion = '8.24'
    maxWarnings = 0
    getConfigDirectory().set(new File(rootDir, "config/checkstyle"))
  }

  pmd {
    toolVersion = "6.25.0"
    ignoreFailures = true
    incrementalAnalysis = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$rootProject.buildDir/reports/pmd/$project.name")
    ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
  }

  jacoco {
    toolVersion = "0.8.4"
  }

  sourceCompatibility = 11

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.4'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.30'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    api group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
  }

  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = "$rootDir/config/owasp/suppressions.xml"
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }
}

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

  // Gather execution data from all subprojects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  allprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    csv.enabled = false
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco/html")
    xml.enabled = true
    xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom {
        url.set("https://github.com/quickcase/spring-logging.git")
      }
    }
  }

  repositories {
    maven {
      name = "Github"
      url = uri("https://maven.pkg.github.com/quickcase/spring-logging")
      credentials {
        username = System.getenv("GITHUB_USERNAME")
        password = System.getenv("GITHUB_PACKAGE_TOKEN")
      }
    }
  }
}

dependencies {
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.6.28'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.18.1'
  testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
  testImplementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
  testImplementation group: 'com.google.code.tempus-fugit', name: 'tempus-fugit', version: '1.1'
}
